"""
Helper Utilities - C√°c h√†m h·ªó tr·ª£ chung cho t·∫•t c·∫£ agents
"""

from typing import Dict, List, Any, Optional


def format_price(price: Optional[float]) -> str:
    """
    Format gi√° ti·ªÅn theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
    
    Args:
        price: Gi√° ti·ªÅn c·∫ßn format
        
    Returns:
        Chu·ªói gi√° ƒë√£ format (VD: "890.000 ‚Ç´")
    """
    if price is None:
        price = 0
    return f"{price:,.0f} ‚Ç´".replace(",", ".")


class BotConfig:
    """C·∫•u h√¨nh chung cho bot"""
    def __init__(self):
        self.bot_name = "Ph∆∞∆°ng"
        self.bot_role = "Chuy√™n vi√™n chƒÉm s√≥c kh√°ch h√†ng"
        self.greeting_style = "Em (nh√¢n vi√™n) - Ch·ªã/Anh (kh√°ch h√†ng)"
        self.tone = "Th√¢n thi·ªán, l·ªãch s·ª±, chuy√™n nghi·ªáp"
        self.allowed_emojis = ["üå∑", "üíï", "‚ú®", "üí¨", "üíñ", "üå∏", "üòç", "üíå", "üíé", "üìù", "üöö"]


class StoreInfo:
    """Th√¥ng tin c·ª≠a h√†ng"""
    def __init__(self):
        self.name = "BeWo"
        self.description = "Shop th·ªùi trang Linen cao c·∫•p, phong c√°ch thanh l·ªãch, sang tr·ªçng"
        self.policies = {
            "shipping": "Giao h√†ng to√†n qu·ªëc 1-4 ng√†y, ph√≠ 30k (mi·ªÖn ph√≠ t·ª´ 300k)",
            "return": "ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu c√≤n nguy√™n tem, ch∆∞a qua s·ª≠ d·ª•ng",
            "payment": "COD - Ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n"
        }
        self.contact = {
            "hotline": "1900 xxxx",
            "email": "support@bewo.vn",
            "fanpage": "facebook.com/BeWoVietnam",
            "working_hours": "8:00 - 22:00 (Th·ª© 2 - Ch·ªß nh·∫≠t)"
        }


class ProductSummary:
    """T·ªïng quan s·∫£n ph·∫©m"""
    def __init__(self):
        self.total_products = 125
        self.categories = ["√Åo s∆° mi", "Qu·∫ßn su√¥ng", "√Åo vest", "Ch√¢n v√°y", "V√°y li·ªÅn th√¢n", "Ph·ª• ki·ªán"]
        self.price_range = {"min": 299000, "max": 1890000}
        self.top_materials = ["Linen cao c·∫•p", "Tweed", "Cotton l·ª•a"]
        self.available_sizes = ["XS", "S", "M", "L", "XL"]


def build_customer_context(context: Dict[str, Any]) -> str:
    """
    X√¢y d·ª±ng context v·ªÅ kh√°ch h√†ng t·ª´ d·ªØ li·ªáu
    
    Args:
        context: Dictionary ch·ª©a th√¥ng tin kh√°ch h√†ng
        
    Returns:
        Chu·ªói context ƒë√£ format
    """
    full_context = ""
    
    # 1. CUSTOMER PROFILE
    if context.get('profile'):
        full_context += "\nüë§ KH√ÅCH H√ÄNG:\n"
        p = context['profile']
        if p.get('preferred_name') or p.get('full_name'):
            full_context += f"T√™n: {p.get('preferred_name') or p.get('full_name')}\n"
        if p.get('phone'):
            full_context += f"SƒêT: {p['phone']}\n"
        if p.get('usual_size'):
            full_context += f"Size th∆∞·ªùng m·∫∑c: {p['usual_size']}\n"
        if p.get('style_preference'):
            full_context += f"Phong c√°ch: {', '.join(p['style_preference'])}\n"
        if p.get('total_orders', 0) > 0:
            full_context += f"ƒê√£ mua: {p['total_orders']} ƒë∆°n (kh√°ch quen)\n"
    else:
        full_context += "\nüë§ KH√ÅCH H√ÄNG: Kh√°ch m·ªõi (ch∆∞a c√≥ profile)\n"
    
    return full_context


def build_address_context(context: Dict[str, Any]) -> str:
    """
    X√¢y d·ª±ng context v·ªÅ ƒë·ªãa ch·ªâ kh√°ch h√†ng
    
    Args:
        context: Dictionary ch·ª©a th√¥ng tin ƒë·ªãa ch·ªâ
        
    Returns:
        Chu·ªói context ƒë·ªãa ch·ªâ ƒë√£ format
    """
    full_context = ""
    
    if context.get('saved_address') and context['saved_address'].get('address_line'):
        addr = context['saved_address']
        full_context += "\nüìç ƒê·ªäA CH·ªà ƒê√É L∆ØU:\n"
        full_context += f"{addr['address_line']}"
        if addr.get('ward'):
            full_context += f", {addr['ward']}"
        if addr.get('district'):
            full_context += f", {addr['district']}"
        if addr.get('city'):
            full_context += f", {addr['city']}"
        full_context += f"\nSƒêT: {addr.get('phone') or context.get('profile', {}).get('phone') or 'ch∆∞a c√≥'}\n"
        full_context += "\n‚ö†Ô∏è KHI CH·ªêT ƒê∆†N: D√πng ƒë·ªãa ch·ªâ TH·∫¨T n√†y ƒë·ªÉ x√°c nh·∫≠n!\n"
    else:
        full_context += "\nüìç ƒê·ªäA CH·ªà: Ch∆∞a c√≥ ‚Üí C·∫ßn h·ªèi KHI KH√ÅCH MU·ªêN ƒê·∫∂T H√ÄNG\n"
    
    return full_context


def build_history_context(context: Dict[str, Any], limit: int = 5) -> str:
    """
    X√¢y d·ª±ng context l·ªãch s·ª≠ h·ªôi tho·∫°i
    
    Args:
        context: Dictionary ch·ª©a l·ªãch s·ª≠
        limit: S·ªë tin nh·∫Øn t·ªëi ƒëa hi·ªÉn th·ªã
        
    Returns:
        Chu·ªói context l·ªãch s·ª≠ ƒë√£ format
    """
    full_context = ""
    
    if context.get('history'):
        full_context += f"\nüìú L·ªäCH S·ª¨ H·ªòI THO·∫†I ({limit} TIN CU·ªêI):\n"
        for msg in context['history'][-limit:]:
            role = "üë§ KH√ÅCH" if msg.get('sender_type') == 'customer' else "ü§ñ BOT"
            text = msg.get('content', {}).get('text', '')
            if text:
                full_context += f"{role}: {text[:150]}\n"
        full_context += "\n‚ö†Ô∏è ƒê·ªåC K·ª∏ L·ªäCH S·ª¨ ƒë·ªÉ hi·ªÉu ng·ªØ c·∫£nh v√† KH√îNG h·ªèi l·∫°i!\n"
    
    return full_context


def build_products_context(context: Dict[str, Any], limit: int = 10) -> str:
    """
    X√¢y d·ª±ng context danh s√°ch s·∫£n ph·∫©m
    
    Args:
        context: Dictionary ch·ª©a danh s√°ch s·∫£n ph·∫©m
        limit: S·ªë s·∫£n ph·∫©m t·ªëi ƒëa hi·ªÉn th·ªã
        
    Returns:
        Chu·ªói context s·∫£n ph·∫©m ƒë√£ format
    """
    full_context = ""
    
    if context.get('products'):
        full_context += f"\nüõçÔ∏è DANH S√ÅCH S·∫¢N PH·∫®M ({limit} ƒê·∫¶U):\n"
        for idx, p in enumerate(context['products'][:limit], 1):
            full_context += f"{idx}. {p.get('name')}\n"
            full_context += f"   Gi√°: {format_price(p.get('price'))}"
            stock = p.get('stock')
            if stock is not None:
                if stock > 0:
                    full_context += f" | C√≤n: {stock} sp"
                else:
                    full_context += " | H·∫æT H√ÄNG"
            full_context += f"\n   ID: {p.get('id')}\n"
        full_context += "\n‚ö†Ô∏è CH·ªà G·ª¢I √ù s·∫£n ph·∫©m PH√ô H·ª¢P v·ªõi nhu c·∫ßu kh√°ch!\n"
    
    return full_context


def build_cart_context(context: Dict[str, Any]) -> str:
    """
    X√¢y d·ª±ng context gi·ªè h√†ng
    
    Args:
        context: Dictionary ch·ª©a gi·ªè h√†ng
        
    Returns:
        Chu·ªói context gi·ªè h√†ng ƒë√£ format
    """
    full_context = ""
    
    if context.get('cart'):
        full_context += "\nüõí GI·ªé H√ÄNG HI·ªÜN T·∫†I:\n"
        total = 0
        for idx, item in enumerate(context['cart'], 1):
            full_context += f"{idx}. {item.get('name')} - Size {item.get('size')} x{item.get('quantity')}\n"
            total += item.get('price', 0) * item.get('quantity', 1)
        full_context += f"\nüí∞ T·∫°m t√≠nh: {format_price(total)}\n"
    
    return full_context


def build_full_context(
    context: Dict[str, Any],
    include_customer: bool = True,
    include_address: bool = True,
    include_history: bool = True,
    include_products: bool = False,
    include_cart: bool = False
) -> str:
    """
    X√¢y d·ª±ng full context d·ª±a tr√™n c√°c t√πy ch·ªçn
    
    Args:
        context: Dictionary ch·ª©a t·∫•t c·∫£ th√¥ng tin
        include_customer: C√≥ bao g·ªìm th√¥ng tin kh√°ch h√†ng kh√¥ng
        include_address: C√≥ bao g·ªìm ƒë·ªãa ch·ªâ kh√¥ng
        include_history: C√≥ bao g·ªìm l·ªãch s·ª≠ kh√¥ng
        include_products: C√≥ bao g·ªìm s·∫£n ph·∫©m kh√¥ng
        include_cart: C√≥ bao g·ªìm gi·ªè h√†ng kh√¥ng
        
    Returns:
        Chu·ªói full context ƒë√£ format
    """
    full_context = ""
    
    if include_customer:
        full_context += build_customer_context(context)
    
    if include_address:
        full_context += build_address_context(context)
    
    if include_history:
        full_context += build_history_context(context)
    
    if include_products:
        full_context += build_products_context(context)
    
    if include_cart:
        full_context += build_cart_context(context)
    
    return full_context